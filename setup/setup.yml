---
<<<<<<< HEAD
- name: Setup
  hosts: localhost
  vars:
    ansible_user: vagrant
    kube_nodes:
      - ip: "192.168.121.10"
        hostname: "kubes-master"
      - ip: "192.168.121.21"
        hostname: "kubes-node1"
      - ip: "192.168.121.22"
        hostname: "kubes-node2"
      - ip: "192.168.121.23"
        hostname: "kubes-backup"
      - ip: "192.168.121.24"
        hostname: "kubes-argocd-node"
      - ip: "192.168.121.25"
        hostname: "kubes-ingress-controller"
  tasks:
    - name: Set /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.hostname }}"
        state: present
      loop: "{{ kube_nodes }}"
      become: yes

    - name: Create inventory files
      blockinfile:
        path: "{{ item }}"
        create: yes
        block: |
          [master]
          {{ kube_nodes[0].hostname }} ansible_host={{ kube_nodes[0].ip }}

          [etcd]
          {{ kube_nodes[0].hostname }} ansible_host={{ kube_nodes[0].ip }}

          [services]
          {{ kube_nodes[1].hostname }} ansible_host={{ kube_nodes[1].ip }}
          {{ kube_nodes[2].hostname }} ansible_host={{ kube_nodes[2].ip }}
          {{ kube_nodes[3].hostname }} ansible_host={{ kube_nodes[3].ip }}

          [basic]
          {{ kube_nodes[1].hostname }} ansible_host={{ kube_nodes[1].ip }}
          {{ kube_nodes[2].hostname }} ansible_host={{ kube_nodes[2].ip }}

          [backup]
          {{ kube_nodes[3].hostname }} ansible_host={{ kube_nodes[3].ip }}

          [argocd]
          {{ kube_nodes[4].hostname }} ansible_host={{ kube_nodes[4].ip }}

          [ingress-controller]
          {{ kube_nodes[5].hostname }} ansible_host={{ kube_nodes[5].ip }}

          [workers:children]
          basic
          argocd
          ingress-controller

          [main:children]
          master
          workers

          [all:vars]
          ansible_python_interpreter=/usr/bin/python3
      loop:
        - "{{ ansible_env.HOME }}/Automation/kubeinst/inventory"
        - "{{ ansible_env.HOME }}/Automation/setup/inventory"
        
    - name: Create ansible.cfg file
      blockinfile:
        path: "{{ item }}"
        create: yes
        content: |
          [defaults]
          inventory = ./inventory
          remote_user = "{{ ansible_user }}"

          [privilege_escalation]
          become = true
          become_method = sudo
          become_ask_pass = false
      loop:
        - "{{ ansible_env.HOME }}/Automation/kubeinst/ansible.cfg"
        - "{{ ansible_env.HOME }}/Automation/setup/ansible.cfg"

    - name: Install sshpass
      apt:
        name: sshpass
        state: present
      become: yes

    - name: Generate SSH key if not exists
      command: ssh-keygen -t rsa -b 4096 -N "" -f ~/.ssh/id_rsa
      args:
        creates: ~/.ssh/id_rsa

    - name: Copy SSH key to nodes
      shell: |
        sshpass -p "{{ ansible_user }}" ssh-copy-id -o StrictHostKeyChecking=no {{ item.hostname }}
      loop: "{{ kube_nodes }}"

    - name: Add nodes to known_hosts
      shell: |
        ssh-keyscan -H {{ item.ip }} >> ~/.ssh/known_hosts
      loop: "{{ kube_nodes }}"
=======
- name: Copy ssh key
  hosts: localhost
  roles:
    - cpssh

- name: Open ports using iptables
  hosts: all
  become: yes
  roles:
    - iptables

- name: Configure NTP on servers
  hosts: all
  become: yes
  roles:
    - ntp
>>>>>>> 97d52da (version1)
